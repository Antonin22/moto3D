#version 330 core

// Entr√©es du vertex shader
in vec2 fragUV;
in vec3 fragNormal;
in vec3 fragWorldPos;

// Uniformes
uniform vec3 lightColor;
uniform float lightIntensity;
uniform vec3 ambientLight;
uniform vec3 viewPosition;
uniform sampler2D roadTexture;  // Texture de la route

// Uniformes additionnels
uniform vec3 lightPosition;
uniform vec3 objectColor;

// Sortie
out vec4 finalColor;

void main() {

    vec3 N = normalize(fragNormal);

    vec3 L = normalize(lightPosition - fragWorldPos);

    float distance = length(lightPosition - fragWorldPos);

    vec3 V = normalize(viewPosition - fragWorldPos);

    float diff = max(dot(N, L), 0.0);
    vec3 diffuse = diff * lightColor * lightIntensity;

    vec3 R = reflect(-L, N);
    float spec = pow(max(dot(R, V), 0.0), 32.0);
    vec3 specular = spec * lightColor * lightIntensity;


    float attenuation = 1.0 / (1.0 + 0.1 * distance + 0.01 * distance * distance);

    vec3 finalDiffuse = diffuse * attenuation;
    vec3 finalSpecular = specular * attenuation;
    vec3 finalAmbient = ambientLight;


    vec3 roadTextureColor = texture(roadTexture, fragUV).rgb;
    vec3 objectFinalColor = roadTextureColor;

    vec3 finalLight = finalAmbient + finalDiffuse + finalSpecular;


    finalColor = vec4(finalLight * objectFinalColor, 1.0);
}
